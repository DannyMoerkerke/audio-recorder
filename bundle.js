(()=>{var t={831:()=>{const t=document.querySelector("audio-recorder"),e=document.querySelector("#mic-permission-dialog"),n=document.querySelector("#dialog-close");t.addEventListener("notallowed",(()=>e.open())),n.addEventListener("click",(()=>e.close()))}},e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}(()=>{"use strict";class t extends HTMLElement{static get observedAttributes(){return["label"]}constructor(){super(),this.attachShadow({mode:"open"}).innerHTML='\n            <style>\n                :host {\n                    --button-color: transparent;\n                    --button-color-hover: #e2e2e2;\n                    --font-color: #000000;\n                    --font-size: 1em;\n                    --icon-size: 24px;\n                    --button-padding: 0 8px 0 8px;\n                    --button-padding-circle: 8px;\n                    --border-radius: 2px;\n                    display: block;\n                    width: fit-content;\n                }\n                :host([raised]) {\n                  --button-color: #e2e2e2;\n                }\n                button {\n                    border: none;\n                    border-radius: var(--border-radius);\n                    min-height: 36px;\n                    padding: var(--button-padding);\n                    font-size: var(--font-size);\n                    color: var(--font-color);\n                    background-color: var(--button-color);\n                    cursor: pointer;\n                    outline: none;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    position: relative;\n                    overflow: hidden;\n                }\n                :host([label]) button {\n                    min-width: 88px;\n                }\n                button:hover {\n                    transition: background-color 0.3s ease-out;\n                    background-color: var(--button-color-hover);\n                }\n                :host([disabled]) button {\n                    opacity: 0.5;\n                    cursor: not-allowed;\n                }\n                :host([disabled]) button:hover {\n                    background-color: transparent;\n                }\n                :host([disabled]) button .ripple {\n                    display: none;\n                }\n                button.active .ripple {\n                    animation-name: ripple;\n                    animation-duration: 0.4s;\n                    animation-timing-function: ease-out;\n                    background-color: #808080;\n                    border-radius: 50%;\n                    position: absolute;\n                    top: 50%;\n                    left: 50%;\n                    transform: translate(-50%, -50%);\n                }\n                #label {\n                    display: inline-block;\n                    position: relative;\n                    margin-right: 8px;\n                    margin-left: 8px;\n                }\n                :host([circle]) button {\n                    border-radius: 50%;\n                    --button-padding: var(--button-padding-circle);\n                }\n                :host([raised]) button {\n                    background-color: var(--button-color);\n                    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 6px, rgba(0, 0, 0, 0.12) 0px 1px 4px;\n                }\n                :host([raised]) button[disabled]:hover {\n                    background-color: var(--button-color);\n                }\n                ::slotted([slot="left-icon"]) {\n                    float: left;\n                    font-size: var(--icon-size) !important;\n                }\n                ::slotted([slot="right-icon"]) {\n                    float: right;\n                    font-size: var(--icon-size) !important;\n                }\n                ::slotted([slot="file-input"]) {\n                  position: absolute;\n                  top: 0;\n                  left: 0;\n                  bottom: 0;\n                  right: 0;\n                  opacity: 0;\n                  z-index: 9;\n                }\n                \n                @keyframes ripple {\n                    from {\n                        width: 0;\n                        height: 0;\n                        opacity: 0.8;\n                    }\n                    to {\n                        width: 100px;\n                        height: 100px;\n                        opacity: 0.1;\n                    }                \n                }\n            </style>\n            \n            <button type="button">\n                <div class="ripple"></div>\n                <slot name="file-input"></slot>\n                <slot name="left-icon"></slot>\n                <span id="label"></span>\n                <slot name="right-icon"></slot>\n            </button>\n        ',this.button=this.shadowRoot.querySelector("button"),this.label=this.shadowRoot.querySelector("#label"),this.ripple=this.shadowRoot.querySelector(".ripple")}connectedCallback(){this.hasAttribute("label")?this.label.textContent=this.getAttribute("label"):this.label.style.display="none",this.button.addEventListener("click",(()=>{this.button.classList.add("active")})),this.ripple.addEventListener("animationend",(()=>{this.button.classList.remove("active")}))}attributeChangedCallback(t){"label"===t&&(this.hasAttribute("label")?this.label.textContent=this.getAttribute("label"):this.label.style.display="none")}get disabled(){return this.hasAttribute("disabled")}set disabled(t){this.button.disabled=t,t?this.setAttribute("disabled",""):this.removeAttribute("disabled")}}customElements.get("material-button")||customElements.define("material-button",t);class e extends HTMLElement{static get observedAttributes(){return["value","disabled"]}constructor(){super(),this.attachShadow({mode:"open"}).innerHTML='\n            <style>\n                :host {\n                    display: block;\n                    --thumb-color: #cccccc;\n                    --thumb-color-light: #ffffff;\n                    --track-color: #cccccc;\n                    --thumb-size: 16px;\n                    --track-height: 4px;\n                    --margin: 5px;\n                }\n                :host([disabled]) input {\n                    opacity: 0.5;\n                }\n                input[type=range] {\n                    -webkit-appearance: none;\n                    background-color: transparent;\n                    margin: 0;\n                    width: 100%;\n                    z-index: 1;\n                    cursor: pointer;\n                }\n                input[type=range]:focus {\n                    outline: none;\n                    \n                }\n                input[type=range]::-webkit-slider-runnable-track {\n                    width: 100%;\n                    height: var(--track-height);\n                    cursor: pointer;\n                    background: var(--track-color);\n                    border-radius: 1.3px;\n                }\n    \n                input[type=range]::-moz-range-track {\n                    width: 100%;\n                    height: var(--track-height);\n                    cursor: pointer;\n                    background: var(--track-color);\n                    border-radius: 1.3px;\n                }\n                input[type=range]::-moz-focus-outer {\n                    border: 0;\n                }\n                input[type=range]::-ms-track {\n                    width: 100%;\n                    height: var(--track-height);\n                    cursor: pointer;\n                    background: transparent;\n                    border-color: transparent;\n                    border-width: 16px 0;\n                    color: transparent;\n                }\n    \n                input[type=range]::-webkit-slider-thumb {\n                    height: var(--thumb-size);\n                    width: var(--thumb-size);\n                    border-radius: 50%;\n                    background: var(--thumb-color);\n                    cursor: pointer;\n                    -webkit-appearance: none;\n                    margin-top: calc((var(--track-height) - var(--thumb-size) ) / 2);\n                    box-shadow: 0 0 0 0 transparent;\n                    transition: box-shadow 0.2s ease-in;\n                }\n                \n                input[type=range]:hover::-webkit-slider-thumb {\n                    box-shadow: 0 0 0 var(--thumb-size) var(--thumb-color-light);\n                }\n                input[type=range]:focus::-webkit-slider-thumb {\n                    box-shadow: 0 0 0 var(--thumb-size) var(--thumb-color-light);\n                }\n                \n    \n                input[type=range]::-moz-range-thumb {\n                    height: var(--thumb-size);\n                    width: var(--thumb-size);\n                    border: 0;\n                    border-radius: 50%;\n                    background: var(--thumb-color);\n                    cursor: pointer;\n                    margin-top: calc((var(--track-height) - var(--thumb-size) ) / 2);\n                    box-shadow: 0 0 0 0 transparent;\n                    transition: box-shadow 0.2s ease-in;\n                }\n                \n                input[type=range]:hover::-moz-range-thumb {\n                    box-shadow: 0 0 0 var(--thumb-size) var(--thumb-color-light);\n                }\n                input[type=range]:focus::-moz-range-thumb {\n                    box-shadow: 0 0 0 var(--thumb-size) var(--thumb-color-light);\n                }\n    \n                input[type=range]::-ms-thumb {\n                    height: 16px;\n                    width: 16px;\n                    border-radius: 50%;\n                    background: rgb(204, 204, 204);\n                    cursor: pointer;\n                    box-shadow: 0 0 0 0 rgba(204, 204, 204, 0.1);\n                    transition: box-shadow 0.2s ease-in;\n                }\n                \n                input[type=range]:hover::-ms-thumb {\n                    box-shadow: 0 0 0 16px rgba(204, 204, 204, 0.1);\n                }\n                input[type=range]:focus::-ms-thumb {\n                    box-shadow: 0 0 0 16px rgba(204, 204, 204, 0.1);\n                }\n                \n                input[type=range]::-ms-fill-lower {\n                    background: rgb(204, 204, 204);\n                    border: 0.2px solid #010101;\n                    border-radius: 2.6px;\n                }\n                input[type=range]::-ms-fill-upper {\n                    background: rgb(204, 204, 204);\n                    border: 0.2px solid #010101;\n                    border-radius: 2.6px;\n                }\n      \n                #container {\n                    margin: var(--margin);\n                    position: relative;\n                    display: flex;\n                }\n                #output {\n                    position: absolute;\n                }\n                #input-container {\n                  display: flex;\n                  cursor: pointer;\n                  width: 100%;\n                  height: var(--thumb-size);\n                }\n            </style>\n            \n            <div id="container">\n                <div id="input-container">\n                  <input type="range">\n                </div>\n                <output id="output"></output>\n            </div>\n        ',this.input=this.shadowRoot.querySelector("input[type=range]")}connectedCallback(){this.container=this.shadowRoot.querySelector("#container"),this.host=this.input.getRootNode().host,this.min=this.hasAttribute("min")?this.getAttribute("min"):1,this.input.min=this.min,this.max=this.hasAttribute("max")?this.getAttribute("max"):100,this.input.max=this.max,this.step=this.hasAttribute("step")?this.getAttribute("step"):1,this.input.step=this.step,this.input.value=this.hasAttribute("value")?this.getAttribute("value"):this.input.value,this.value=this.input.value,this.disabled=this.hasAttribute("disabled"),this.input.addEventListener("input",this.handleInput.bind(this));const t=/rgba\((\d{1,3}),\s?(\d{1,3}),\s?(\d{1,3}),\s?(\d|\d\.\d+)\)/,e=getComputedStyle(this.host),n=e.getPropertyValue("--thumb-color").trim()||e.getPropertyValue("--thumb-color").trim(),i=t.exec(n),o=/^#([A-Fa-f0-9]{3}){1,2}$/.test(n)?this.hexToRgbA(n):/rgb\((.+)\)/.test(n)?n.replace(/rgb\((.+)\)/,"rgba($1, 0.1)"):t.test(n)?`rgba(${i[1]}, ${i[2]}, ${i[3]}, 0.1)`:null;if(null===o)throw new Error("invalid color specified for --thumb color: "+n);this.host.style.setProperty("--thumb-color-light",o)}handleInput(t){this.value=t.target.value,this.dispatchEvent(new CustomEvent("change",{detail:{value:t.target.value}}))}hexToRgbA(t){let e=[...t.substring(1)];return 3===e.length&&(e=[e[0],e[0],e[1],e[1],e[2],e[2]]),e="0x"+e.join(""),`rgba(${[e>>16&255,e>>8&255,255&e].join(",")}, 0.1)`}set value(t){this.input.value=t,this.setAttribute("value",t)}get value(){return this.getAttribute("value")}set disabled(t){this.input.disabled=t,t?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get disabled(){return this.hasAttribute("disabled")}attributeChangedCallback(t,e,n){"value"===t&&(this.input.value=n),"disabled"===t&&(this.input.disabled=this.hasAttribute("disabled"))}}customElements.get("material-slider")||customElements.define("material-slider",e);class i extends HTMLElement{static get observedAttributes(){return["view"]}constructor(){super(),this.attachShadow({mode:"open"}).innerHTML='\n      <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">\n      \n      <style>\n        :host {\n          --width: 210px;\n          --height: 300px;\n          --border: none;\n          --frequency-background-color: #ffffff;\n          --frequency-bars-color: #ff0000;\n          --waveform-background-color: #ffffff;\n          --waveform-color: #ff0000;\n          --waveform-progress-color: #337ab7;\n          display: inline-flex;\n          flex-direction: column;\n          border: var(--border);\n          box-sizing: content-box;\n          min-width: 210px;\n          width: var(--width);\n          min-height: var(--height);\n        }\n        \n        canvas {\n          display: block;\n        }\n        \n        material-slider {\n          --track-height: 1px;\n          --thumb-size: 12px;\n        }\n        \n        #volume-min,\n        #volume-max {\n          --button-color-hover: transparent;\n        }\n        \n        #buttons {\n          display: flex;\n          flex-direction: row;\n        }\n        \n        #controls {\n          display: flex;\n          flex-direction: row;\n          flex-wrap: wrap;\n          justify-content: space-between;\n          align-items: center;\n          padding: 5px 10px 5px 5px;\n          max-width: 800px;\n        }\n        \n        #time {\n          display: flex;\n          align-items: center;\n          padding: 5px;\n        }\n        \n        #volume-container {\n          display: flex;\n          align-items: center;\n        }\n        \n        #container {\n          width: 100%;\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          flex-grow: 1;\n        }\n        \n        #audio-container {\n          position: relative;\n          flex-grow: 1;\n          pointer-events: none;\n        }\n        \n        :host([src]) #audio-container {\n          pointer-events: initial;\n        }\n        \n        #waveform-container,\n        #frequencies-container {\n          display: none;\n        }\n        \n        #waveform-container {\n          background-color: var(--waveform-background-color);\n        }\n        \n        #frequencies-container {\n          z-index: 1;\n          background-color: var(--frequency-background-color);\n        }\n        \n        :host([view="frequencies"]) #frequencies-container {\n          display: block;\n        }\n        \n        :host([view="frequencies"]) #frequencies-button {\n          opacity: .5;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n        \n        :host([view="frequencies"]) #audio-container {\n          pointer-events: none;\n        }\n        \n        :host([view="waveform"]) #waveform-container,\n        :host([view="waveform"]) #progress-container {\n          display: block;\n        }\n        \n        :host([view="waveform"]) #waveform-button {\n          opacity: .5;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n        \n        #progress-container {\n          display: none;\n          position: absolute;\n          top: 0;\n          left: 0;\n          overflow: hidden;\n          width: 0;\n          border-right-width: 1px;\n          border-right-style: solid;\n          border-right-color: var(--waveform-progress-color);\n        }\n        \n        audio {\n          display: none;\n        }\n        \n        #stop-capture-audio,\n        #stop-record-audio {\n          display: none;\n        }\n        \n        #stop-record-audio {\n          --font-color: #ff0000;\n        }\n        \n        #record-audio {\n          --font-color: #ff0000;\n          opacity: .5;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n        \n        #play,\n        #save-audio,\n        :host([src][state="capturing"]) #play,\n        :host([src][state="capturing"]) #save-audio {\n          opacity: .5;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n        \n        :host([src]) #play,\n        :host([src]) #save-audio {\n          opacity: 1;\n          cursor: pointer;\n          pointer-events: initial;\n        }\n        \n        #save-audio a {\n          color: #000000;\n          text-decoration: none;\n        }\n        #save-audio a i {\n          display: block;\n          width: 100%;\n          height: 100%;\n        }\n        \n        #pause {\n          display: none;\n        }\n        \n        :host([state="playing"]) #pause {\n          display: block;\n        }\n        \n        :host([state="playing"]) #play {\n          display: none;\n        }\n        \n        :host([state="playing"]) #capture-audio {\n          opacity: .5;\n          cursor: not-allowed;\n          pointer-events: none;\n        }\n        \n        :host([state="capturing"]) #stop-capture-audio,\n        :host([state="recording"]) #stop-capture-audio {\n          display: block;\n        }\n        :host([state="capturing"]) #capture-audio,\n        :host([state="recording"]) #capture-audio {\n          display: none;\n        }\n        \n        :host([state="capturing"]) #record-audio {\n          opacity: 1;\n          cursor: pointer;\n          pointer-events: initial;\n        }\n        \n        :host([state="recording"]) #stop-record-audio {\n          display: block;\n        }\n        :host([state="recording"]) #record-audio {\n          display: none;\n        }\n      </style>\n      \n      <audio id="input" controls></audio>\n      \n      <div id="container">\n        <div id="audio-container">\n          <div id="frequencies-container">\n            <canvas id="frequencies"></canvas>\n          </div>\n  \n          <div id="waveform-container">\n            <canvas id="waveform"></canvas>\n          </div>\n          \n          <div id="progress-container">\n            <canvas id="progress"></canvas>\n          </div>\n        </div>\n        \n        <div id="controls">\n          <div id="buttons">\n            <material-button id="capture-audio" raised part="button">\n              <i class="material-icons" slot="left-icon">mic</i>\n            </material-button>\n            \n            <material-button id="stop-capture-audio" raised part="button">\n              <i class="material-icons" slot="left-icon">mic_off</i>\n            </material-button>\n            \n            <material-button id="play" raised part="button">\n              <i class="material-icons" slot="left-icon">play_arrow</i>\n            </material-button>\n            \n            <material-button id="pause" raised part="button">\n              <i class="material-icons" slot="left-icon">pause</i>\n            </material-button>\n      \n            <material-button id="record-audio" raised part="button">\n              <i class="material-icons" slot="left-icon">fiber_manual_record</i>\n            </material-button>\n            \n            <material-button id="stop-record-audio" raised part="button">\n              <i class="material-icons" slot="left-icon">stop</i>\n            </material-button>\n            \n            <material-button id="save-audio" raised part="button">\n              <a id="save-audio-link" slot="left-icon" target="_blank">\n                <i class="material-icons">save</i>\n              </a>\n            </material-button>\n            \n            <material-button id="frequencies-button" raised part="button">\n              <i class="material-icons" slot="left-icon">equalizer</i>\n            </material-button>\n            \n            <material-button id="waveform-button" raised part="button">\n              <i class="material-icons" slot="left-icon">graphic_eq</i>\n            </material-button>\n          </div>\n          \n          <div id="volume-container">\n            <material-button id="volume-min" circle part="volume-button">\n              <i class="material-icons" slot="left-icon">volume_off</i>\n            </material-button>\n            \n            <material-slider id="volume" value="1" min="0" max="1" step="0.01" part="slider"></material-slider>\n            \n            <material-button id="volume-max" circle part="volume-button">\n              <i class="material-icons" slot="left-icon">volume_up</i>\n            </material-button>\n          </div>\n        \n          <div id="time" part="time">\n            <span id="elapsed-time"></span> / <span id="total-time"></span>\n          </div>\n        </div>\n      </div>\n    ',this.hours=0,this.minutes=0,this.seconds=0,this.secs=0,this.pauseTime=0,this.audioBuffers=[],this.frequencies=!1,this.state="idle",this.view=this.getAttribute("view")||"frequencies",this.bars=parseInt(this.getAttribute("bars")||20,10),this.mediaElementSource=null,this.mediaStreamSource=null,this.nativeFileSystemSupported="showSaveFilePicker"in window,this.maxChunkLength=524e3,this.canvas=this.shadowRoot.querySelector("#waveform"),this.canvasContext=this.canvas.getContext("2d"),this.progressCanvas=this.shadowRoot.querySelector("#progress"),this.progressCanvasContext=this.progressCanvas.getContext("2d"),this.audioContainer=this.shadowRoot.querySelector("#audio-container"),this.frequencyCanvas=this.shadowRoot.querySelector("#frequencies"),this.frequencyCanvasContext=this.frequencyCanvas.getContext("2d"),this.waveformContainer=this.shadowRoot.querySelector("#waveform-container"),this.progressContainer=this.shadowRoot.querySelector("#progress-container"),this.frequenciesContainer=this.shadowRoot.querySelector("#frequencies-container"),this.playButton=this.shadowRoot.querySelector("#play"),this.pauseButton=this.shadowRoot.querySelector("#pause"),this.elapsedTime=this.shadowRoot.querySelector("#elapsed-time"),this.totalTime=this.shadowRoot.querySelector("#total-time"),this.volume=this.shadowRoot.querySelector("#volume"),this.volumeMinButton=this.shadowRoot.querySelector("#volume-min"),this.volumeMaxButton=this.shadowRoot.querySelector("#volume-max"),this.input=this.shadowRoot.querySelector("audio"),this.freqButton=this.shadowRoot.querySelector("#frequencies-button"),this.waveformButton=this.shadowRoot.querySelector("#waveform-button"),this.captureAudioButton=this.shadowRoot.querySelector("#capture-audio"),this.stopCaptureAudioButton=this.shadowRoot.querySelector("#stop-capture-audio"),this.recordAudioButton=this.shadowRoot.querySelector("#record-audio"),this.stopRecordAudioButton=this.shadowRoot.querySelector("#stop-record-audio"),this.saveAudioLink=this.shadowRoot.querySelector("#save-audio-link"),this.nativeFileSystemSupported&&this.saveAudioLink.addEventListener("click",(async()=>this.saveFile(this.recording)))}resizeCanvas({width:t,height:e}){this.canvas.width=0,this.canvas.height=0,this.canvas.width=t,this.canvas.height=e,this.progressCanvas.width=t,this.progressCanvas.height=e,this.frequencyCanvas.width=t,this.frequencyCanvas.height=e,this.canvasWidth=this.canvas.width,this.canvasHeight=this.canvas.height}connectedCallback(){const t=getComputedStyle(this.shadowRoot.host),e=t.getPropertyValue("--waveform-background-color"),n=t.getPropertyValue("--waveform-color"),i=t.getPropertyValue("--waveform-progress-color");this.canvases=[{element:this.canvas,context:this.canvasContext,fillStyle:e,strokeStyle:n},{element:this.progressCanvas,context:this.progressCanvasContext,fillStyle:e,strokeStyle:i}],this.frequenciesBackgroundColor=t.getPropertyValue("--frequency-background-color"),this.frequenciesBarsColor=t.getPropertyValue("--frequency-bars-color"),setTimeout((()=>{const{width:t,height:e}=this.audioContainer.getBoundingClientRect();if(this.resizeCanvas({width:t,height:e}),"ResizeObserver"in window){let t=!0;const e=new ResizeObserver((n=>{t?t=!1:n.forEach((({contentRect:n})=>{this.resizeCanvas(n),"waveform"===this.view&&this.recording&&this.renderWaveform(this.recording),"frequencies"===this.view&&this.analyser&&(cancelAnimationFrame(this.frequencyAnimation),this.renderFrequencyAnalyzer()),t=!0,e.observe(this.audioContainer)}))}));e.observe(this.audioContainer)}})),this.showTotalTime(0),this.showElapsedTime(0),this.audioContainer.addEventListener("click",this.handleWaveformClick.bind(this)),this.playButton.addEventListener("click",this.playPause.bind(this)),this.pauseButton.addEventListener("click",this.playPause.bind(this)),this.volume.addEventListener("change",(t=>this.setVolume(t.detail.value))),this.input.addEventListener("ended",this.stopAudio.bind(this)),this.freqButton.addEventListener("click",this.showFrequencyAnalyzer.bind(this)),this.waveformButton.addEventListener("click",this.showWaveform.bind(this)),this.captureAudioButton.addEventListener("click",this.captureAudio.bind(this)),this.stopCaptureAudioButton.addEventListener("click",this.stopCaptureAudio.bind(this)),this.recordAudioButton.addEventListener("click",this.recordAudio.bind(this)),this.stopRecordAudioButton.addEventListener("click",this.stopRecordAudio.bind(this)),this.volumeMinButton.addEventListener("click",(t=>{this.setVolume(0),this.volume.value=0})),this.volumeMaxButton.addEventListener("click",(t=>{this.setVolume(1),this.volume.value=1}));const o=()=>{this.isWebKit="webkitAudioContext"in window,this.context=new(window.AudioContext||window.webkitAudioContext),this.output=this.context.destination,this.gainNode=this.context.createGain(),this.analyser=this.context.createAnalyser(),this.analyser.fftSize=256,document.removeEventListener("mousedown",o)};document.addEventListener("mousedown",o)}getMediaElementSource(t){return this.mediaElementSource||(this.mediaElementSource=this.context.createMediaElementSource(t),this.mediaElementSource.connect(this.analyser),this.mediaElementSource.connect(this.gainNode)),this.mediaElementSource}getMediaStreamSource(t){return this.mediaStreamSource||(this.mediaStreamSource=this.context.createMediaStreamSource(t),this.mediaStreamSource.connect(this.analyser),this.mediaStreamSource.connect(this.gainNode)),this.mediaStreamSource}async initializeAudio(t){this.curSource=t instanceof HTMLAudioElement?this.getMediaElementSource(t):this.getMediaStreamSource(t),this.curSource.connect(this.analyser),this.curSource.connect(this.gainNode),this.gainNode.connect(this.output)}async openFile(t){await this.loadFile(t),await this.initializeAudio(this.input)}async loadFile(t){const e=new FileReader;e.onloadend=t=>{this.src=t.target.result,this.nativeFileSystemSupported||(this.saveAudioLink.download="isTypeSupported"in MediaRecorder?"capture.webm":"capture.mp3",this.saveAudioLink.href=t.target.result)},e.readAsDataURL(t),await this.renderWaveform(t),await this.initializeAudio(this.input),this.progressContainer.style.width=0,this.view="waveform"}async saveFile(t){const e="."+t.type.split("/").pop(),n=await window.showSaveFilePicker({types:[{description:"Audio file",accept:{[t.type]:e}}]}),i=await n.createWritable();await i.write({type:"write",data:t}),await i.close()}async captureAudio(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:!0}),this.currentVolume=this.volume.value,this.setVolume(0),this.volume.disabled=!0,await this.initializeAudio(this.stream),this.renderFrequencyAnalyzer(),this.view="frequencies",this.state="capturing"}catch(t){"NotAllowedError"===t.name&&this.dispatchEvent(new CustomEvent("notallowed",{detail:{message:"Access to the device's microphone is not allowed"}}))}}stopCaptureAudio(){this.stream&&(this.stream.getTracks().map((t=>t.stop())),this.mediaStreamSource=null,cancelAnimationFrame(this.frequencyAnimation),this.clearFrequenciesDisplay(),this.state="idle",this.volume.disabled=!1,this.setVolume(this.currentVolume))}recordAudio(){const t=[];this.recorder=new MediaRecorder(this.stream);const e="isTypeSupported"in MediaRecorder?{type:"audio/webm"}:{type:"audio/mpeg"};this.recorder.start(250),this.state="recording",this.recorder.addEventListener("dataavailable",(({data:n})=>{if(void 0!==n&&0!==n.size){t.push(n);const i=new Blob(t,e);this.renderWaveform(i)}})),this.recorder.addEventListener("stop",(async()=>{this.recording=new Blob(t,e),this.stopCaptureAudio(),await this.loadFile(this.recording)}))}stopRecordAudio(){this.recorder.stop()}showFrequencyAnalyzer(){this.view="frequencies"}showWaveform(){this.view="waveform"}setVolume(t){this.gainNode.gain.setValueAtTime(t,this.context.currentTime)}handleWaveformClick(t){this.curSource&&(this.state="idle",this.input.pause(),cancelAnimationFrame(this.timerId)),this.progressContainer.style.width=t.offsetX+"px",this.input.currentTime=t.offsetX/this.canvasWidth*this.duration,this.showElapsedTime(this.input.currentTime)}stringToArrayBuffer(t){return new Uint8Array(t.length).map(((e,n)=>t.codePointAt(n)))}getArrayBuffer(t){const e=new FileReader;return e.readAsArrayBuffer(t),new Promise(((t,n)=>{e.onerror=t=>n(t),e.onloadend=e=>t(e.target.result)}))}sliceAudio(t,e,n){const i=e+n===t.byteLength?t:t.slice(e,n),o=new Blob([new Uint8Array(i)]),a=new FileReader;return a.readAsArrayBuffer(o),new Promise(((t,e)=>{a.onloadend=n=>{const i=n.target.result;this.isWebKit?this.context.decodeAudioData(i,(e=>t(e)),(t=>e(t))):this.context.decodeAudioData(i).then((e=>t(e))).catch((t=>e(t)))}}))}async getAudioBuffers(t){const e=t.byteLength,n=e>this.maxChunkLength?this.maxChunkLength:e;let i=0+n;const o=this,a=[];for await(const s of((t,i,a)=>async function*(){for(;i<e;){const s=await o.sliceAudio(t,i,a);yield s,a=(i+=n)+n>e?e:i+n}}())(t,0,i))a.push(s);return a}getNodesAfterOffset(t,e){let n=0,i=0;return[t.filter((t=>(n+=t.buffer.duration,i+=n<e?t.buffer.duration:0,n>e))),e-i]}playPause(){const t=()=>{const e=this.input.currentTime;this.showElapsedTime(e);const n=e/this.duration*this.canvasWidth;this.progressContainer.style.width=n+"px",this.timerId=requestAnimationFrame(t)};"playing"===this.state?(this.state="idle",this.input.pause(),this.pauseTime=this.input.currentTime,this.clearFrequenciesDisplay(),cancelAnimationFrame(this.timerId),cancelAnimationFrame(this.frequencyAnimation)):(this.state="playing",this.input.play(),this.renderFrequencyAnalyzer(),requestAnimationFrame(t))}stopAudio(){this.state="idle",this.clearFrequenciesDisplay(),cancelAnimationFrame(this.timerId),cancelAnimationFrame(this.frequencyAnimation),this.input.currentTime=0,this.progressContainer.style.width=0,this.showElapsedTime(0)}formatTime(t){const e=Math.floor(t/3600),n=Math.floor(t%3600/60),i=Math.floor(t)%60,o=e<10?"0"+e:e,a=n<10?"0"+n:n,s=i<10?"0"+i:i;return"00"!==o?`${o}:${a}:${s}`:`${a}:${s}`}showElapsedTime(t){this.elapsedTime.innerHTML=this.formatTime(t)}showTotalTime(t){this.totalTime.innerHTML=this.formatTime(t)}renderFrequencyAnalyzer(){const t=this.analyser.frequencyBinCount,e=new Float32Array(t),n=(this.canvasWidth-(this.bars-1))/this.bars;this.frequencyCanvasContext.clearRect(0,0,this.canvasWidth,this.canvasHeight);const i=()=>{this.frequencyAnimation=requestAnimationFrame(i),this.analyser.getFloatFrequencyData(e),this.frequencyCanvasContext.fillStyle=this.frequenciesBackgroundColor,this.frequencyCanvasContext.fillRect(0,0,this.canvasWidth,this.canvasHeight);let o=0;for(let i=0;i<t;i++){const t=2*(e[i]+140);this.frequencyCanvasContext.fillStyle=this.frequenciesBarsColor,this.frequencyCanvasContext.fillRect(o,this.canvasHeight-.75*t,n,.75*t),o+=n+1}};i()}getWaveformData(t){const e=t.map((t=>t.getChannelData(0))),n=e.reduce(((t,e)=>t+e.length),0),i=new Float32Array(n);let o=0;return e.forEach((t=>{i.set(t,o),o+=t.length})),i}async renderWaveform(t){const e=await this.getArrayBuffer(t),n=await this.getAudioBuffers(e);this.audioBuffers=n,this.duration=n.reduce(((t,e)=>t+e.duration),0),this.showTotalTime(this.duration);const i=this.getWaveformData(n),o=2e3,a=i.length,s=Math.floor(a/o),r=this.canvasWidth/o;this.canvases.forEach((t=>{t.context.save(),t.context.fillStyle=t.fillStyle,t.context.fillRect(0,0,this.canvasWidth,this.canvasHeight),t.context.strokeStyle=t.strokeStyle,t.context.translate(0,this.canvasHeight/2),t.context.lineWidth=1,t.context.beginPath();for(let e=0;e<=o;e++){const n=Math.floor(s*e),o=e*r,a=i[n]*this.canvasHeight*.8;t.context.moveTo(o,a),t.context.lineTo(o,-1*a)}t.context.stroke(),t.context.restore(),t.context.strokeStyle=t.strokeStyle,t.context.moveTo(0,this.canvasHeight/2),t.context.lineTo(this.canvasWidth,this.canvasHeight/2),t.context.stroke(),t.context.restore()}))}get view(){return this.getAttribute("view")}set view(t){this.setAttribute("view",t)}get state(){return this.getAttribute("state")}set state(t){this.setAttribute("state",t)}get src(){return this.getAttribute("src")}set src(t){this.setAttribute("src",t),this.input.src=t}clearWaveform(){this.canvases.forEach((t=>t.context.clearRect(0,0,t.element.width,t.element.height)))}clearFrequenciesDisplay(){this.frequencyCanvasContext.clearRect(0,0,this.frequencyCanvas.width,this.frequencyCanvas.height)}}customElements.define("audio-recorder",i);class o extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).innerHTML='\n            <style>\n                :host {\n                    --header-background: #ffffff;\n                    --body-background: #ffffff;\n                    --footer-background: #ffffff;\n                    --backdrop-color: rgba(128,128,128,0.5);\n                    --dialog-width: 90%;\n                    --dialog-height: auto;\n                    display: block;\n                }\n                \n                @media (min-width: 768px) {\n                  :host {\n                    --dialog-width: 70%;\n                  }\n                }\n                \n                @media (min-width: 1024px) {\n                  :host {\n                    --dialog-width: 40%;\n                  }\n                }\n                \n                @media (min-width: 1200px) {\n                  :host {\n                    --dialog-width: 30%;\n                  }\n                }\n                \n                #backdrop {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    width: 100%;\n                    height: 100%;\n                    background: var(--backdrop-color);\n                    animation-name: fadein;\n                    animation-duration: .2s;\n                    animation-fill-mode: forwards;\n                    animation-timing-function: ease-out;\n                    z-index: 9999;\n                }\n                #modal {\n                    display: grid;\n                    grid-template-rows: 1fr 3fr 1fr;\n                    position: fixed;\n                    top: 50%;\n                    left: 50%;\n                    transform: translate(-50%, -50%);\n                    width: var(--dialog-width);\n                    height: var(--dialog-height);\n                    background: transparent;\n                    animation-name: slidedown;\n                    animation-duration: .2s;\n                    animation-fill-mode: forwards;\n                    animation-timing-function: ease-out;\n                }\n                header {\n                    background: var(--header-background);\n                    display: flex;\n                    align-items: center;\n                    padding: 0 10px;\n                }\n                main {\n                    background: var(--body-background);\n                    padding: 0 10px;\n                }\n                footer {\n                    background: var(--footer-background);\n                    display: flex;\n                    align-items: center;\n                    padding: 0 10px;\n                }\n                ::slotted([slot]) {\n                    margin: 10px;\n                }\n                ::slotted([slot]:empty) {\n                    margin: 0px;\n                }\n                @keyframes fadein {\n                    from {\n                        opacity: 0;\n                    }\n                    to {\n                        opacity: 1;\n                    }\n                }\n                \n                @keyframes slidedown {\n                    from {\n                        transform: translate(-50%, -65%);\n                    }\n                    to {\n                        transform: translate(-50%, -50%);\n                    }\n                }\n                \n                @keyframes fadeout {\n                    from {\n                        opacity: 1;\n                    }\n                    to {\n                        opacity: 0;\n                    }\n                }\n                \n                @keyframes slideup {\n                    from {\n                        transform: translate(-50%, -50%);\n                    }\n                    to {\n                        transform: translate(-50%, -65%);\n                    }\n                }\n                #backdrop.close {\n                    animation-name: fadeout;\n                    animation-duration: .2s;\n                    animation-fill-mode: forwards;\n                    animation-timing-function: ease-out;\n                }\n                #backdrop.close #modal {\n                    animation-name: slideup;\n                    animation-duration: .2s;\n                    animation-fill-mode: forwards;\n                    animation-timing-function: ease-out;\n                }\n                \n            </style>\n            \n            <div id="backdrop">\n                <div id="modal">\n                    <header>\n                        <slot name="header"></slot>\n                    </header>\n                    <main>\n                        <slot name="body"></slot>\n                    </main>\n                    <footer>\n                        <slot name="footer"></slot>\n                    </footer>\n                </div>\n            </div>\n        ',this.backdrop=this.shadowRoot.querySelector("#backdrop"),this.modal=this.shadowRoot.querySelector("#modal"),this.headerSlot=this.shadowRoot.querySelector('slot[name="header"]'),this.bodySlot=this.shadowRoot.querySelector('slot[name="body"]'),this.footerSlot=this.shadowRoot.querySelector('slot[name="footer"]')}connectedCallback(){this.style.display="none",this.backdrop.addEventListener("click",this.handleClick.bind(this)),this.backdrop.addEventListener("animationend",this.handleAnimationEnd.bind(this))}handleAnimationEnd(t){"fadeout"===t.animationName&&(this.style.display="none",this.backdrop.classList.remove("close"))}handleClick(t){this.hasAttribute("modal")||t.composedPath()[0]!==this.backdrop||this.close()}open(){this.style.display="block"}close(){this.backdrop.classList.add("close")}get header(){return this.headerSlot.assignedNodes()[0]}set header(t){const e=this.headerSlot.assignedNodes();e.length&&(e[0].innerHTML=t)}get body(){return this.bodySlot.assignedNodes()[0]}set body(t){const e=this.bodySlot.assignedNodes();e.length&&(e[0].innerHTML=t)}get footer(){return this.footerSlot.assignedNodes()[0]}set footer(t){const e=this.footerSlot.assignedNodes();e.length&&(e[0].innerHTML=t)}}customElements.get("material-dialog")||customElements.define("material-dialog",o),n(831)})()})();